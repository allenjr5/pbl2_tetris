#Importa√ß√£o de bibliotecas
import os, time, random, keyboard

#Declara√ß√£o de vari√°veis que ser√£o utilizadas com frequ√™ncia ao longo do c√≥digo
n_linhas = 20
n_colunas = 10

#Inicializa√ß√£o da matriz do tabuleiro
tabuleiro = [['‚¨õ' for _ in range(n_colunas)] for _ in range(n_linhas)]

#Inicializa√ß√£o das matrizes das pe√ßas
pecas = [
    ['1', '1', '1', '1'],
    [['1', '1'], ['1', '1']],
    [['1', '1', '1'], ['0', '1', '0']],
    [['0', '1', '1'], ['1', '1', '0']],
    [['1', '1', '0'], ['0', '1', '1']],
    [['1', '0', '0'], ['1', '1', '1']],
    [['0', '0', '1'], ['1', '1', '1']]
]

#Fun√ß√£o que mostra o tabuleiro no terminal
def mostra_tabuleiro():
    for l in range(n_linhas):
        for c in range(n_colunas):
            print(tabuleiro[l][c], end=' ')
        print()
    print(f'Pontos: ')
    time.sleep(0.3)

#Fun√ß√£o que adiciona a pe√ßa
def adiciona_peca(peca, py, px):
    for l in range(len(peca)):
        for c in range(len(peca[0])):
            if peca[l][c] == '1':
                tabuleiro[py + l][px + c] = 'üü¶'

#Fun√ß√£o que limpa a posi√ß√£o anterior da pe√ßa
def limpa_peca(peca, py, px):
    for l in range(len(peca)):
        for c in range(len(peca[0])):
            if peca[l][c] == '1':
                tabuleiro[py + l][px + c] = '‚¨õ'

#Fun√ß√£o que verifica a colis√£o da pe√ßa
def verifica_colisao(peca, py, px):
    for l in range(len(peca)):
        for c in range(len(peca[0])):
            if peca[l][c] == '1':
                if py + l >= n_linhas or px + c < 0 or px + c >= n_colunas or tabuleiro[py + l][px + c] == 'üü¶':
                    return True
    return False

#Fun√ß√£o que gira a pe√ßa
def girar_peca(peca):
    return [list(linha) for linha in zip(*peca[::-1])]

#Fun√ß√£o que verifica se existem linhas completas e as limpa
def verifica_linhas():
    linhas_completas = [l for l in range(n_linhas) if all(c == 'üü¶' for c in tabuleiro[l])]
    for linha in linhas_completas:
        tabuleiro.pop(linha)
        tabuleiro.insert(0, ['‚¨õ' for _ in range(n_colunas)])

#Fun√ß√£o que limpa o terminal
def limpa_terminal():
    os.system('cls' if os.name == 'nt' else 'clear')

#Fun√ß√£o principal
def main():
    #Looping do jogo
    while True:

        #Escolhe uma pe√ßa aleat√≥rio
        peca = random.choice(pecas)
        
        #Define a posi√ß√£o y inicial da pe√ßa
        posicao_y = 0
        
        #Defini a posi√ß√£o x inicial da pe√ßa de forma aleat√≥ria
        posicao_x = random.randint(0, n_colunas - len(peca[0]))
        adiciona_peca(peca, posicao_y, posicao_x)
        
        #looping das pe√ßas
        while True:
            mostra_tabuleiro()
            limpa_peca(peca, posicao_y, posicao_x)
        
            
            #Desce as pe√ßas automaticamente para baixo e verifica a colis√£o
            if not verifica_colisao(peca, posicao_y + 1, posicao_x):
                posicao_y += 1
            else:
                limpa_terminal()
                adiciona_peca(peca, posicao_y, posicao_x)
                
                #Chamada da fun√ß√£o que verifica se existem linhas completas no tabuleiro
                verifica_linhas()

                break
            
            #Move a pe√ßa para a esquerda ao apertar o bot√£o 'esquerda'
            if keyboard.is_pressed('left'):
                if not verifica_colisao(peca, posicao_y, posicao_x - 1):
                    posicao_x -= 1
            
            #Move a pe√ßa para a direita ao apertar o bot√£o 'direita'
            elif keyboard.is_pressed('right'):
                if not verifica_colisao(peca, posicao_y, posicao_x + 1):
                    posicao_x += 1
            
            #Faz com que a pe√ßa caia mais r√°pido ao apertar o bot√£o 'baixo'
            elif keyboard.is_pressed('down'):
                if not verifica_colisao(peca, posicao_y + 1, posicao_x):
                    posicao_y += 1
            
            #Faz com que a pe√ßa gire ao apertar o bot√£o 'cima'
            elif keyboard.is_pressed('up'):  # Gira a pe√ßa ao pressionar 'up'
                peca_girada = girar_peca(peca)
                if not verifica_colisao(peca_girada, posicao_y, posicao_x):
                    peca = peca_girada
            
            #Limpa o terminal depois que a pe√ßa colide
            limpa_terminal()
            adiciona_peca(peca, posicao_y, posicao_x)

#Chamada da Fun√ß√£o Principal
main()
